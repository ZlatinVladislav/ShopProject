import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { map, Observable, of, ReplaySubject } from 'rxjs';
import {
  AccountBackendService,
  AddressViewModel,
  IUserViewModel,
  LoginViewModel,
  RegisterViewModel,
} from '../autogenerated/api.client.generated';
import { handleError } from '../core/custom-operators';
import { IAddress } from '../shared/models/address';

@Injectable({
  providedIn: 'root',
})
export class AccountService {
  public currentUserSource = new ReplaySubject<IUserViewModel>(1);
  public currentUser$ = this.currentUserSource.asObservable();

  public constructor(
    private readonly accountBackendService: AccountBackendService,
    private readonly router: Router,
    private readonly toastr: ToastrService,
  ) {}

  public loadCurrentUser(token: string): Observable<void | null> {
    if (token === null) {
      this.currentUserSource.next(null);
      return of(null);
    }

    return this.accountBackendService.getCurrentUser(`Bearer ${token}`).pipe(
      map((user: IUserViewModel) => {
        if (user) {
          localStorage.setItem('token', user.token);

          this.currentUserSource.next(user);
        }
      }),

      handleError(this.toastr),
    );
  }

  public login(values: LoginViewModel): Observable<void> {
    return this.accountBackendService.login(values).pipe(
      map((user: IUserViewModel) => {
        if (user) {
          localStorage.setItem('token', user.token);

          this.currentUserSource.next(user);
        }
      }),

      handleError(this.toastr),
    );
  }

  public register(values: RegisterViewModel): Observable<void> {
    return this.accountBackendService.register(values).pipe(
      map((user: IUserViewModel) => {
        if (user) {
          localStorage.setItem('token', user.token);

          this.currentUserSource.next(user);
        }
      }),

      handleError(this.toastr),
    );
  }

  public logout(): void {
    localStorage.removeItem('token');
    this.currentUserSource.next(null);

    this.router.navigateByUrl('/');
  }

  public checkEmailExists(email: string): Observable<boolean> {
    return this.accountBackendService.checkEmailExist(email).pipe(handleError(this.toastr));
  }

  public getUserAddress(): Observable<IAddress> {
    return this.accountBackendService.getUserAddress().pipe(handleError(this.toastr));
  }

  public updateUserAddress(address: AddressViewModel): Observable<AddressViewModel> {
    return this.accountBackendService.updateUserAddress(address).pipe(handleError(this.toastr));
  }
}
