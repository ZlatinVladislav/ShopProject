import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ToastrService } from 'ngx-toastr';
import { map, Observable, of } from 'rxjs';
import { environment } from 'src/environments/environment';
import {
  IProductBrandViewModel,
  IProductDetailsViewModel,
  IProductDetailsViewModelPagination,
  IProductTypeViewModel,
  ProductDetailsViewModelPagination,
  ProductsBackendService,
} from '../autogenerated/api.client.generated';
import { handleError } from '../core/custom-operators';
import { IProductCreate } from '../shared/models/productCreate';
import { ShopParams } from '../shared/models/shopParams';

@Injectable({
  providedIn: 'root',
})
export class ShopService {
  public products: IProductDetailsViewModel[] = [];
  public brands: IProductBrandViewModel[] = [];
  public types: IProductTypeViewModel[] = [];
  public pagination = new ProductDetailsViewModelPagination();
  public shopParams = new ShopParams();
  public productCache = new Map();

  public constructor(
    private http: HttpClient,
    private readonly productsBackendService: ProductsBackendService,
    private readonly toastr: ToastrService,
  ) {}

  public getProducts(useCache: boolean): Observable<IProductDetailsViewModelPagination> {
    if (useCache === false) {
      this.productCache = new Map();
    }

    if (this.productCache.size > 0 && useCache === true) {
      if (this.productCache.has(Object.values(this.shopParams).join('-'))) {
        this.pagination.data = this.productCache.get(Object.values(this.shopParams).join('-'));
        return of(this.pagination);
      }
    }

    return this.productsBackendService
      .getProducts(
        this.shopParams.pageNumber,
        this.shopParams.pageSize,
        this.shopParams.brandId != 0 ? this.shopParams.brandId : undefined,
        this.shopParams.typeId != 0 ? this.shopParams.typeId : undefined,
        this.shopParams.sort,
        this.shopParams.search,
      )
      .pipe(
        map((response) => {
          this.productCache.set(Object.values(this.shopParams).join('-'), response.data);
          this.pagination = response;
          return this.pagination;
        }),

        handleError(this.toastr),
      );
  }

  public uploadProduct(form: IProductCreate): Observable<any> {
    const uploadData = new FormData();

    for (const i in form) {
      if (form[i] instanceof Blob) {
        uploadData.append(i, form[i], form[i].name ? form[i].name : '');
      } else uploadData.append(i, form[i]);
    }

    return this.http.post(environment.apiUrl + 'products/create', uploadData);
  }

  public setShopParams(params: ShopParams): void {
    this.shopParams = params;
  }

  public getShopParams(): ShopParams {
    return this.shopParams;
  }

  public getProduct(id: number): Observable<IProductDetailsViewModel> {
    let product: IProductDetailsViewModel;
    this.productCache.forEach((products: IProductDetailsViewModel[]) => {
      product = products.find((p) => p.id === id);
    });

    if (product) {
      return of(product);
    }

    return this.productsBackendService.getProduct(id).pipe(handleError(this.toastr));
  }

  public getBrands(): Observable<IProductBrandViewModel[]> {
    if (this.brands.length > 0) {
      return of(this.brands);
    }

    return this.productsBackendService.getBrands().pipe(
      map((response) => {
        this.brands = response;
        return response;
      }),

      handleError(this.toastr),
    );
  }

  public getTypes(): Observable<IProductTypeViewModel[]> {
    if (this.types.length > 0) {
      return of(this.types);
    }

    return this.productsBackendService.getTypes().pipe(
      map((response) => {
        this.types = response;
        return response;
      }),

      handleError(this.toastr),
    );
  }
}
