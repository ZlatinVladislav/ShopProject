//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAccountBackendService {
    /**
     * @param authorization (optional) 
     * @return Success
     */
    getCurrentUser(authorization: string | undefined): Observable<UserViewModel>;
    /**
     * @param email (optional) 
     * @return Success
     */
    checkEmailExist(email: string | undefined): Observable<boolean>;
    /**
     * @return Success
     */
    getUserAddress(): Observable<AddressViewModel>;
    /**
     * @param body (optional) 
     * @return Success
     */
    updateUserAddress(body: AddressViewModel | undefined): Observable<AddressViewModel>;
    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginViewModel | undefined): Observable<UserViewModel>;
    /**
     * @param body (optional) 
     * @return Success
     */
    register(body: RegisterViewModel | undefined): Observable<UserViewModel>;
}

@Injectable()
export class AccountBackendService implements IAccountBackendService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param authorization (optional) 
     * @return Success
     */
    getCurrentUser(authorization: string | undefined): Observable<UserViewModel> {
        let url_ = this.baseUrl + "/api/Account";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserViewModel>;
        }));
    }

    protected processGetCurrentUser(response: HttpResponseBase): Observable<UserViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param email (optional) 
     * @return Success
     */
    checkEmailExist(email: string | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Account/emailexists?";
        if (email === null)
            throw new Error("The parameter 'email' cannot be null.");
        else if (email !== undefined)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckEmailExist(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckEmailExist(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processCheckEmailExist(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getUserAddress(): Observable<AddressViewModel> {
        let url_ = this.baseUrl + "/api/Account/address";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserAddress(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserAddress(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AddressViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AddressViewModel>;
        }));
    }

    protected processGetUserAddress(response: HttpResponseBase): Observable<AddressViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AddressViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateUserAddress(body: AddressViewModel | undefined): Observable<AddressViewModel> {
        let url_ = this.baseUrl + "/api/Account/address";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUserAddress(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUserAddress(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AddressViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AddressViewModel>;
        }));
    }

    protected processUpdateUserAddress(response: HttpResponseBase): Observable<AddressViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AddressViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginViewModel | undefined): Observable<UserViewModel> {
        let url_ = this.baseUrl + "/api/Account/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserViewModel>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<UserViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    register(body: RegisterViewModel | undefined): Observable<UserViewModel> {
        let url_ = this.baseUrl + "/api/Account/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserViewModel>;
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<UserViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IBasketBackendService {
    /**
     * @param id (optional) 
     * @return Success
     */
    getBasketById(id: string | undefined): Observable<CustomerBasketViewModel>;
    /**
     * @param body (optional) 
     * @return Success
     */
    updateBasket(body: CustomerBasketViewModel | undefined): Observable<CustomerBasketViewModel>;
    /**
     * @param id (optional) 
     * @return Success
     */
    deleteBasket(id: string | undefined): Observable<void>;
}

@Injectable()
export class BasketBackendService implements IBasketBackendService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getBasketById(id: string | undefined): Observable<CustomerBasketViewModel> {
        let url_ = this.baseUrl + "/api/Basket?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBasketById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBasketById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CustomerBasketViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CustomerBasketViewModel>;
        }));
    }

    protected processGetBasketById(response: HttpResponseBase): Observable<CustomerBasketViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomerBasketViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateBasket(body: CustomerBasketViewModel | undefined): Observable<CustomerBasketViewModel> {
        let url_ = this.baseUrl + "/api/Basket";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateBasket(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateBasket(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CustomerBasketViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CustomerBasketViewModel>;
        }));
    }

    protected processUpdateBasket(response: HttpResponseBase): Observable<CustomerBasketViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomerBasketViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteBasket(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Basket?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteBasket(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteBasket(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteBasket(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IBuggyBackendService {
    /**
     * @return Success
     */
    getSecretTextAuth(): Observable<string>;
    /**
     * @return Success
     */
    getNotFoundRequestById(): Observable<void>;
    /**
     * @return Success
     */
    getServerError(): Observable<void>;
    /**
     * @return Success
     */
    getBadRequest(): Observable<void>;
    /**
     * @return Success
     */
    getNotFoundRequestValidation(id: number): Observable<void>;
}

@Injectable()
export class BuggyBackendService implements IBuggyBackendService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getSecretTextAuth(): Observable<string> {
        let url_ = this.baseUrl + "/api/Buggy/testauth";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSecretTextAuth(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSecretTextAuth(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processGetSecretTextAuth(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getNotFoundRequestById(): Observable<void> {
        let url_ = this.baseUrl + "/api/Buggy/notfound";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNotFoundRequestById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNotFoundRequestById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetNotFoundRequestById(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getServerError(): Observable<void> {
        let url_ = this.baseUrl + "/api/Buggy/servererror";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetServerError(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetServerError(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetServerError(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getBadRequest(): Observable<void> {
        let url_ = this.baseUrl + "/api/Buggy/badrequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBadRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBadRequest(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetBadRequest(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getNotFoundRequestValidation(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Buggy/badrequest/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNotFoundRequestValidation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNotFoundRequestValidation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetNotFoundRequestValidation(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IImageBackendService {
    /**
     * @param file (optional) 
     * @return Success
     */
    uploadImage(file: FileParameter | undefined): Observable<void>;
}

@Injectable()
export class ImageBackendService implements IImageBackendService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param file (optional) 
     * @return Success
     */
    uploadImage(file: FileParameter | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Image/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadImage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadImage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUploadImage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IOrdersBackendService {
    /**
     * @param body (optional) 
     * @return Success
     */
    createOrder(body: OrderViewModel | undefined): Observable<Order>;
    /**
     * @return Success
     */
    getOrdersForUser(): Observable<OrderDetailsViewModal[]>;
    /**
     * @return Success
     */
    getOrderByIdForUser(id: number): Observable<OrderDetailsViewModal>;
    /**
     * @return Success
     */
    getDeliveryMethods(): Observable<DeliveryMethodViewModel[]>;
}

@Injectable()
export class OrdersBackendService implements IOrdersBackendService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createOrder(body: OrderViewModel | undefined): Observable<Order> {
        let url_ = this.baseUrl + "/api/Orders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrder(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Order>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Order>;
        }));
    }

    protected processCreateOrder(response: HttpResponseBase): Observable<Order> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Order.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getOrdersForUser(): Observable<OrderDetailsViewModal[]> {
        let url_ = this.baseUrl + "/api/Orders";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrdersForUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrdersForUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OrderDetailsViewModal[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OrderDetailsViewModal[]>;
        }));
    }

    protected processGetOrdersForUser(response: HttpResponseBase): Observable<OrderDetailsViewModal[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OrderDetailsViewModal.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getOrderByIdForUser(id: number): Observable<OrderDetailsViewModal> {
        let url_ = this.baseUrl + "/api/Orders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrderByIdForUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderByIdForUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OrderDetailsViewModal>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OrderDetailsViewModal>;
        }));
    }

    protected processGetOrderByIdForUser(response: HttpResponseBase): Observable<OrderDetailsViewModal> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrderDetailsViewModal.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getDeliveryMethods(): Observable<DeliveryMethodViewModel[]> {
        let url_ = this.baseUrl + "/api/Orders/deliveryMethods";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeliveryMethods(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeliveryMethods(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeliveryMethodViewModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeliveryMethodViewModel[]>;
        }));
    }

    protected processGetDeliveryMethods(response: HttpResponseBase): Observable<DeliveryMethodViewModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DeliveryMethodViewModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IPaymentsBackendService {
    /**
     * @return Success
     */
    createOrUpdatePaymentIntent(basketID: string): Observable<CustomerBasketViewModel>;
    /**
     * @return Success
     */
    stripeWebHook(): Observable<void>;
}

@Injectable()
export class PaymentsBackendService implements IPaymentsBackendService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    createOrUpdatePaymentIntent(basketID: string): Observable<CustomerBasketViewModel> {
        let url_ = this.baseUrl + "/api/Payments/{basketId}";
        if (basketID === undefined || basketID === null)
            throw new Error("The parameter 'basketID' must be defined.");
        url_ = url_.replace("{basketID}", encodeURIComponent("" + basketID));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdatePaymentIntent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdatePaymentIntent(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CustomerBasketViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CustomerBasketViewModel>;
        }));
    }

    protected processCreateOrUpdatePaymentIntent(response: HttpResponseBase): Observable<CustomerBasketViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomerBasketViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    stripeWebHook(): Observable<void> {
        let url_ = this.baseUrl + "/api/Payments/webhook";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStripeWebHook(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStripeWebHook(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processStripeWebHook(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IProductsBackendService {
    /**
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @param brandId (optional) 
     * @param typeId (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return Success
     */
    getProducts(pageIndex: number | undefined, pageSize: number | undefined, brandId: number | undefined, typeId: number | undefined, sort: string | undefined, search: string | undefined): Observable<ProductDetailsViewModelPagination>;
    /**
     * @return Success
     */
    getProduct(id: number): Observable<ProductDetailsViewModel>;
    /**
     * @return Success
     */
    getBrands(): Observable<ProductBrandViewModel[]>;
    /**
     * @return Success
     */
    getTypes(): Observable<ProductTypeViewModel[]>;
    /**
     * @param name (optional) 
     * @param description (optional) 
     * @param price (optional) 
     * @param pictureForm (optional) 
     * @param productTypeId (optional) 
     * @param productBrandId (optional) 
     * @return Success
     */
    createProduct(name: string | undefined, description: string | undefined, price: number | undefined, pictureForm: FileParameter | undefined, productTypeId: number | undefined, productBrandId: number | undefined): Observable<ProductDetailsViewModel>;
}

@Injectable()
export class ProductsBackendService implements IProductsBackendService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @param brandId (optional) 
     * @param typeId (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return Success
     */
    getProducts(pageIndex: number | undefined, pageSize: number | undefined, brandId: number | undefined, typeId: number | undefined, sort: string | undefined, search: string | undefined): Observable<ProductDetailsViewModelPagination> {
        let url_ = this.baseUrl + "/api/Products?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (brandId === null)
            throw new Error("The parameter 'brandId' cannot be null.");
        else if (brandId !== undefined)
            url_ += "BrandId=" + encodeURIComponent("" + brandId) + "&";
        if (typeId === null)
            throw new Error("The parameter 'typeId' cannot be null.");
        else if (typeId !== undefined)
            url_ += "TypeId=" + encodeURIComponent("" + typeId) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProducts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProducts(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductDetailsViewModelPagination>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductDetailsViewModelPagination>;
        }));
    }

    protected processGetProducts(response: HttpResponseBase): Observable<ProductDetailsViewModelPagination> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductDetailsViewModelPagination.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getProduct(id: number): Observable<ProductDetailsViewModel> {
        let url_ = this.baseUrl + "/api/Products/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProduct(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProduct(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductDetailsViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductDetailsViewModel>;
        }));
    }

    protected processGetProduct(response: HttpResponseBase): Observable<ProductDetailsViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductDetailsViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ApiResponse.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getBrands(): Observable<ProductBrandViewModel[]> {
        let url_ = this.baseUrl + "/api/Products/brands";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBrands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBrands(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductBrandViewModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductBrandViewModel[]>;
        }));
    }

    protected processGetBrands(response: HttpResponseBase): Observable<ProductBrandViewModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductBrandViewModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getTypes(): Observable<ProductTypeViewModel[]> {
        let url_ = this.baseUrl + "/api/Products/types";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTypes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductTypeViewModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductTypeViewModel[]>;
        }));
    }

    protected processGetTypes(response: HttpResponseBase): Observable<ProductTypeViewModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductTypeViewModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param name (optional) 
     * @param description (optional) 
     * @param price (optional) 
     * @param pictureForm (optional) 
     * @param productTypeId (optional) 
     * @param productBrandId (optional) 
     * @return Success
     */
    createProduct(name: string | undefined, description: string | undefined, price: number | undefined, pictureForm: FileParameter | undefined, productTypeId: number | undefined, productBrandId: number | undefined): Observable<ProductDetailsViewModel> {
        let url_ = this.baseUrl + "/api/Products/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (description === null || description === undefined)
            throw new Error("The parameter 'description' cannot be null.");
        else
            content_.append("Description", description.toString());
        if (price === null || price === undefined)
            throw new Error("The parameter 'price' cannot be null.");
        else
            content_.append("Price", price.toString());
        if (pictureForm === null || pictureForm === undefined)
            throw new Error("The parameter 'pictureForm' cannot be null.");
        else
            content_.append("PictureForm", pictureForm.data, pictureForm.fileName ? pictureForm.fileName : "PictureForm");
        if (productTypeId === null || productTypeId === undefined)
            throw new Error("The parameter 'productTypeId' cannot be null.");
        else
            content_.append("ProductTypeId", productTypeId.toString());
        if (productBrandId === null || productBrandId === undefined)
            throw new Error("The parameter 'productBrandId' cannot be null.");
        else
            content_.append("ProductBrandId", productBrandId.toString());

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateProduct(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateProduct(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductDetailsViewModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductDetailsViewModel>;
        }));
    }

    protected processCreateProduct(response: HttpResponseBase): Observable<ProductDetailsViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductDetailsViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class Address implements IAddress {
    firstName?: string | null;
    lastName?: string | null;
    street?: string | null;
    city?: string | null;
    state?: string | null;
    zipCode?: string | null;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.street = _data["street"] !== undefined ? _data["street"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.zipCode = _data["zipCode"] !== undefined ? _data["zipCode"] : <any>null;
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["street"] = this.street !== undefined ? this.street : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["zipCode"] = this.zipCode !== undefined ? this.zipCode : <any>null;
        return data;
    }
}

export interface IAddress {
    firstName?: string | null;
    lastName?: string | null;
    street?: string | null;
    city?: string | null;
    state?: string | null;
    zipCode?: string | null;
}

export class AddressViewModel implements IAddressViewModel {
    firstName!: string;
    lastName!: string;
    street!: string;
    city!: string;
    state!: string;
    zipCode!: string;

    constructor(data?: IAddressViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.street = _data["street"] !== undefined ? _data["street"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.zipCode = _data["zipCode"] !== undefined ? _data["zipCode"] : <any>null;
        }
    }

    static fromJS(data: any): AddressViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddressViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["street"] = this.street !== undefined ? this.street : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["zipCode"] = this.zipCode !== undefined ? this.zipCode : <any>null;
        return data;
    }
}

export interface IAddressViewModel {
    firstName: string;
    lastName: string;
    street: string;
    city: string;
    state: string;
    zipCode: string;
}

export class ApiResponse implements IApiResponse {
    statusCode?: number;
    message?: string | null;

    constructor(data?: IApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statusCode = _data["statusCode"] !== undefined ? _data["statusCode"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
        }
    }

    static fromJS(data: any): ApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusCode"] = this.statusCode !== undefined ? this.statusCode : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        return data;
    }
}

export interface IApiResponse {
    statusCode?: number;
    message?: string | null;
}

export class BasketItemViewModel implements IBasketItemViewModel {
    id!: number;
    productName!: string;
    price!: number;
    quantity!: number;
    pictureUrl!: string;
    brand!: string;
    type!: string;

    constructor(data?: IBasketItemViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
            this.pictureUrl = _data["pictureUrl"] !== undefined ? _data["pictureUrl"] : <any>null;
            this.brand = _data["brand"] !== undefined ? _data["brand"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
        }
    }

    static fromJS(data: any): BasketItemViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new BasketItemViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["pictureUrl"] = this.pictureUrl !== undefined ? this.pictureUrl : <any>null;
        data["brand"] = this.brand !== undefined ? this.brand : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        return data;
    }
}

export interface IBasketItemViewModel {
    id: number;
    productName: string;
    price: number;
    quantity: number;
    pictureUrl: string;
    brand: string;
    type: string;
}

export class CustomerBasketViewModel implements ICustomerBasketViewModel {
    id!: string;
    items?: BasketItemViewModel[] | null;
    deliveryMethodId?: number | null;
    clientSecret?: string | null;
    paymentIntentId?: string | null;
    shippingPrice?: number;

    constructor(data?: ICustomerBasketViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(BasketItemViewModel.fromJS(item));
            }
            else {
                this.items = <any>null;
            }
            this.deliveryMethodId = _data["deliveryMethodId"] !== undefined ? _data["deliveryMethodId"] : <any>null;
            this.clientSecret = _data["clientSecret"] !== undefined ? _data["clientSecret"] : <any>null;
            this.paymentIntentId = _data["paymentIntentId"] !== undefined ? _data["paymentIntentId"] : <any>null;
            this.shippingPrice = _data["shippingPrice"] !== undefined ? _data["shippingPrice"] : <any>null;
        }
    }

    static fromJS(data: any): CustomerBasketViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerBasketViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["deliveryMethodId"] = this.deliveryMethodId !== undefined ? this.deliveryMethodId : <any>null;
        data["clientSecret"] = this.clientSecret !== undefined ? this.clientSecret : <any>null;
        data["paymentIntentId"] = this.paymentIntentId !== undefined ? this.paymentIntentId : <any>null;
        data["shippingPrice"] = this.shippingPrice !== undefined ? this.shippingPrice : <any>null;
        return data;
    }
}

export interface ICustomerBasketViewModel {
    id: string;
    items?: BasketItemViewModel[] | null;
    deliveryMethodId?: number | null;
    clientSecret?: string | null;
    paymentIntentId?: string | null;
    shippingPrice?: number;
}

export class DeliveryMethod implements IDeliveryMethod {
    id?: number;
    shortName?: string | null;
    deliveryTime?: string | null;
    description?: string | null;
    price?: number;

    constructor(data?: IDeliveryMethod) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.shortName = _data["shortName"] !== undefined ? _data["shortName"] : <any>null;
            this.deliveryTime = _data["deliveryTime"] !== undefined ? _data["deliveryTime"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
        }
    }

    static fromJS(data: any): DeliveryMethod {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryMethod();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["shortName"] = this.shortName !== undefined ? this.shortName : <any>null;
        data["deliveryTime"] = this.deliveryTime !== undefined ? this.deliveryTime : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        return data;
    }
}

export interface IDeliveryMethod {
    id?: number;
    shortName?: string | null;
    deliveryTime?: string | null;
    description?: string | null;
    price?: number;
}

export class DeliveryMethodViewModel implements IDeliveryMethodViewModel {
    id?: number;
    shortName?: string | null;
    deliveryTime?: string | null;
    description?: string | null;
    price?: number;

    constructor(data?: IDeliveryMethodViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.shortName = _data["shortName"] !== undefined ? _data["shortName"] : <any>null;
            this.deliveryTime = _data["deliveryTime"] !== undefined ? _data["deliveryTime"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
        }
    }

    static fromJS(data: any): DeliveryMethodViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryMethodViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["shortName"] = this.shortName !== undefined ? this.shortName : <any>null;
        data["deliveryTime"] = this.deliveryTime !== undefined ? this.deliveryTime : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        return data;
    }
}

export interface IDeliveryMethodViewModel {
    id?: number;
    shortName?: string | null;
    deliveryTime?: string | null;
    description?: string | null;
    price?: number;
}

export class LoginViewModel implements ILoginViewModel {
    email?: string | null;
    password?: string | null;

    constructor(data?: ILoginViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
        }
    }

    static fromJS(data: any): LoginViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data;
    }
}

export interface ILoginViewModel {
    email?: string | null;
    password?: string | null;
}

export class Order implements IOrder {
    id?: number;
    buyerEmail?: string | null;
    orderDate?: Date;
    shipToAddress!: Address;
    deliveryMethod?: DeliveryMethod;
    orderItems?: OrderItem[] | null;
    subTotal?: number;
    status?: OrderStatus;
    paymentIntentId?: string | null;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.shipToAddress = new Address();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.buyerEmail = _data["buyerEmail"] !== undefined ? _data["buyerEmail"] : <any>null;
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>null;
            this.shipToAddress = _data["shipToAddress"] ? Address.fromJS(_data["shipToAddress"]) : new Address();
            this.deliveryMethod = _data["deliveryMethod"] ? DeliveryMethod.fromJS(_data["deliveryMethod"]) : <any>null;
            if (Array.isArray(_data["orderItems"])) {
                this.orderItems = [] as any;
                for (let item of _data["orderItems"])
                    this.orderItems!.push(OrderItem.fromJS(item));
            }
            else {
                this.orderItems = <any>null;
            }
            this.subTotal = _data["subTotal"] !== undefined ? _data["subTotal"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.paymentIntentId = _data["paymentIntentId"] !== undefined ? _data["paymentIntentId"] : <any>null;
        }
    }

    static fromJS(data: any): Order {
        data = typeof data === 'object' ? data : {};
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["buyerEmail"] = this.buyerEmail !== undefined ? this.buyerEmail : <any>null;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>null;
        data["shipToAddress"] = this.shipToAddress ? this.shipToAddress.toJSON() : <any>null;
        data["deliveryMethod"] = this.deliveryMethod ? this.deliveryMethod.toJSON() : <any>null;
        if (Array.isArray(this.orderItems)) {
            data["orderItems"] = [];
            for (let item of this.orderItems)
                data["orderItems"].push(item.toJSON());
        }
        data["subTotal"] = this.subTotal !== undefined ? this.subTotal : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["paymentIntentId"] = this.paymentIntentId !== undefined ? this.paymentIntentId : <any>null;
        return data;
    }
}

export interface IOrder {
    id?: number;
    buyerEmail?: string | null;
    orderDate?: Date;
    shipToAddress: Address;
    deliveryMethod?: DeliveryMethod;
    orderItems?: OrderItem[] | null;
    subTotal?: number;
    status?: OrderStatus;
    paymentIntentId?: string | null;
}

export class OrderDetailsViewModal implements IOrderDetailsViewModal {
    id?: number;
    buyerEmail?: string | null;
    orderDate?: Date;
    shipToAddress?: Address;
    deliveryMethod?: string | null;
    shippingPrice?: number;
    orderItems?: OrderItemViewModel[] | null;
    subTotal?: number;
    total?: number;
    status?: string | null;

    constructor(data?: IOrderDetailsViewModal) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.buyerEmail = _data["buyerEmail"] !== undefined ? _data["buyerEmail"] : <any>null;
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>null;
            this.shipToAddress = _data["shipToAddress"] ? Address.fromJS(_data["shipToAddress"]) : <any>null;
            this.deliveryMethod = _data["deliveryMethod"] !== undefined ? _data["deliveryMethod"] : <any>null;
            this.shippingPrice = _data["shippingPrice"] !== undefined ? _data["shippingPrice"] : <any>null;
            if (Array.isArray(_data["orderItems"])) {
                this.orderItems = [] as any;
                for (let item of _data["orderItems"])
                    this.orderItems!.push(OrderItemViewModel.fromJS(item));
            }
            else {
                this.orderItems = <any>null;
            }
            this.subTotal = _data["subTotal"] !== undefined ? _data["subTotal"] : <any>null;
            this.total = _data["total"] !== undefined ? _data["total"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
        }
    }

    static fromJS(data: any): OrderDetailsViewModal {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDetailsViewModal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["buyerEmail"] = this.buyerEmail !== undefined ? this.buyerEmail : <any>null;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>null;
        data["shipToAddress"] = this.shipToAddress ? this.shipToAddress.toJSON() : <any>null;
        data["deliveryMethod"] = this.deliveryMethod !== undefined ? this.deliveryMethod : <any>null;
        data["shippingPrice"] = this.shippingPrice !== undefined ? this.shippingPrice : <any>null;
        if (Array.isArray(this.orderItems)) {
            data["orderItems"] = [];
            for (let item of this.orderItems)
                data["orderItems"].push(item.toJSON());
        }
        data["subTotal"] = this.subTotal !== undefined ? this.subTotal : <any>null;
        data["total"] = this.total !== undefined ? this.total : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        return data;
    }
}

export interface IOrderDetailsViewModal {
    id?: number;
    buyerEmail?: string | null;
    orderDate?: Date;
    shipToAddress?: Address;
    deliveryMethod?: string | null;
    shippingPrice?: number;
    orderItems?: OrderItemViewModel[] | null;
    subTotal?: number;
    total?: number;
    status?: string | null;
}

export class OrderItem implements IOrderItem {
    id?: number;
    itemOrdered?: ProductItemOrdered;
    price?: number;
    quantity?: number;

    constructor(data?: IOrderItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.itemOrdered = _data["itemOrdered"] ? ProductItemOrdered.fromJS(_data["itemOrdered"]) : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
        }
    }

    static fromJS(data: any): OrderItem {
        data = typeof data === 'object' ? data : {};
        let result = new OrderItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["itemOrdered"] = this.itemOrdered ? this.itemOrdered.toJSON() : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        return data;
    }
}

export interface IOrderItem {
    id?: number;
    itemOrdered?: ProductItemOrdered;
    price?: number;
    quantity?: number;
}

export class OrderItemViewModel implements IOrderItemViewModel {
    productId?: number;
    productName?: string | null;
    pictureUrl?: string | null;
    price?: number;
    quantity?: number;

    constructor(data?: IOrderItemViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.pictureUrl = _data["pictureUrl"] !== undefined ? _data["pictureUrl"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
        }
    }

    static fromJS(data: any): OrderItemViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new OrderItemViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["pictureUrl"] = this.pictureUrl !== undefined ? this.pictureUrl : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        return data;
    }
}

export interface IOrderItemViewModel {
    productId?: number;
    productName?: string | null;
    pictureUrl?: string | null;
    price?: number;
    quantity?: number;
}

export enum OrderStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class OrderViewModel implements IOrderViewModel {
    basketId?: string | null;
    deliveryMethodId?: number;
    shipToAddress?: AddressViewModel;

    constructor(data?: IOrderViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.basketId = _data["basketId"] !== undefined ? _data["basketId"] : <any>null;
            this.deliveryMethodId = _data["deliveryMethodId"] !== undefined ? _data["deliveryMethodId"] : <any>null;
            this.shipToAddress = _data["shipToAddress"] ? AddressViewModel.fromJS(_data["shipToAddress"]) : <any>null;
        }
    }

    static fromJS(data: any): OrderViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new OrderViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["basketId"] = this.basketId !== undefined ? this.basketId : <any>null;
        data["deliveryMethodId"] = this.deliveryMethodId !== undefined ? this.deliveryMethodId : <any>null;
        data["shipToAddress"] = this.shipToAddress ? this.shipToAddress.toJSON() : <any>null;
        return data;
    }
}

export interface IOrderViewModel {
    basketId?: string | null;
    deliveryMethodId?: number;
    shipToAddress?: AddressViewModel;
}

export class ProductBrandViewModel implements IProductBrandViewModel {
    id?: number;
    name?: string | null;

    constructor(data?: IProductBrandViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): ProductBrandViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProductBrandViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export interface IProductBrandViewModel {
    id?: number;
    name?: string | null;
}

export class ProductDetailsViewModel implements IProductDetailsViewModel {
    id?: number;
    name?: string | null;
    description?: string | null;
    price?: number;
    pictureUrl?: string | null;
    productType?: string | null;
    productBrand?: string | null;

    constructor(data?: IProductDetailsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.pictureUrl = _data["pictureUrl"] !== undefined ? _data["pictureUrl"] : <any>null;
            this.productType = _data["productType"] !== undefined ? _data["productType"] : <any>null;
            this.productBrand = _data["productBrand"] !== undefined ? _data["productBrand"] : <any>null;
        }
    }

    static fromJS(data: any): ProductDetailsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDetailsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["pictureUrl"] = this.pictureUrl !== undefined ? this.pictureUrl : <any>null;
        data["productType"] = this.productType !== undefined ? this.productType : <any>null;
        data["productBrand"] = this.productBrand !== undefined ? this.productBrand : <any>null;
        return data;
    }
}

export interface IProductDetailsViewModel {
    id?: number;
    name?: string | null;
    description?: string | null;
    price?: number;
    pictureUrl?: string | null;
    productType?: string | null;
    productBrand?: string | null;
}

export class ProductDetailsViewModelPagination implements IProductDetailsViewModelPagination {
    pageIndex?: number;
    pageSize?: number;
    count?: number;
    data?: ProductDetailsViewModel[] | null;

    constructor(data?: IProductDetailsViewModelPagination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"] !== undefined ? _data["pageIndex"] : <any>null;
            this.pageSize = _data["pageSize"] !== undefined ? _data["pageSize"] : <any>null;
            this.count = _data["count"] !== undefined ? _data["count"] : <any>null;
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ProductDetailsViewModel.fromJS(item));
            }
            else {
                this.data = <any>null;
            }
        }
    }

    static fromJS(data: any): ProductDetailsViewModelPagination {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDetailsViewModelPagination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex !== undefined ? this.pageIndex : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        data["count"] = this.count !== undefined ? this.count : <any>null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProductDetailsViewModelPagination {
    pageIndex?: number;
    pageSize?: number;
    count?: number;
    data?: ProductDetailsViewModel[] | null;
}

export class ProductItemOrdered implements IProductItemOrdered {
    productItemId?: number;
    productName?: string | null;
    pictureUrl?: string | null;

    constructor(data?: IProductItemOrdered) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productItemId = _data["productItemId"] !== undefined ? _data["productItemId"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.pictureUrl = _data["pictureUrl"] !== undefined ? _data["pictureUrl"] : <any>null;
        }
    }

    static fromJS(data: any): ProductItemOrdered {
        data = typeof data === 'object' ? data : {};
        let result = new ProductItemOrdered();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productItemId"] = this.productItemId !== undefined ? this.productItemId : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["pictureUrl"] = this.pictureUrl !== undefined ? this.pictureUrl : <any>null;
        return data;
    }
}

export interface IProductItemOrdered {
    productItemId?: number;
    productName?: string | null;
    pictureUrl?: string | null;
}

export class ProductTypeViewModel implements IProductTypeViewModel {
    id?: number;
    name?: string | null;

    constructor(data?: IProductTypeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): ProductTypeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProductTypeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export interface IProductTypeViewModel {
    id?: number;
    name?: string | null;
}

export class RegisterViewModel implements IRegisterViewModel {
    displayName!: string;
    email!: string;
    password!: string;

    constructor(data?: IRegisterViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
        }
    }

    static fromJS(data: any): RegisterViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data;
    }
}

export interface IRegisterViewModel {
    displayName: string;
    email: string;
    password: string;
}

export class UserViewModel implements IUserViewModel {
    email?: string | null;
    displayName?: string | null;
    token?: string | null;

    constructor(data?: IUserViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.token = _data["token"] !== undefined ? _data["token"] : <any>null;
        }
    }

    static fromJS(data: any): UserViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["token"] = this.token !== undefined ? this.token : <any>null;
        return data;
    }
}

export interface IUserViewModel {
    email?: string | null;
    displayName?: string | null;
    token?: string | null;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}